import glob
import os
import re

from py.parsers import BehaviorParser
from .Config import config


class Log:
    def __init__(self, game, dir, data_dir):
        self.game = game
        self.directory = dir
        self.data_directory = data_dir

        self.file = None
        self.sync_file = None
        self.labels = []

        self.player_number = 0
        self.nao = None
        self.robot = None

        self.parse_info()
        self.scan_data()

    def parse_info(self):
        log_file = os.path.join(self.directory, config['log']['name'])
        if os.path.isfile(log_file):
            self.file = log_file

        m = re.match(config['log']['regex'], os.path.basename(self.directory))

        self.player_number = m.group(1)
        self.nao = m.group(2)
        self.robot = m.group(3)

    def scan_data(self):
        if os.path.isdir(self.data_directory):
            # set the sync information
            sync_file = os.path.join(self.data_directory, config['log']['sync'])
            if os.path.isfile(sync_file):
                self.sync_file = { 'file': sync_file }
                # TODO: parse this file

            self.labels = glob.glob(self.data_directory+'/'+config['log']['labels'][0]+'*'+config['log']['labels'][1])
            # TODO: parse labels ?

    def has_syncing_file(self):
        return self.sync_file is not None

    def create_default_syncing_file(self):
        print(self.directory, self.data_directory, self.file)
        if self.file:
            point = self.find_first_ready_state(self.file)
            if point:
                self.sync_file = os.path.join(self.data_directory, config['log']['sync'])
                with open(self.sync_file, 'w') as sf:
                    sf.writelines([
                        '# generated by extract_sync_points.py\n'
                        'sync-time-video=0.0\n',
                        'sync-time-log='+str(point[1]/1000.0)+'\n',
                        'video-file='+(self.game.videos[0] if self.game.videos else '')+'\n'
                    ])

    def find_first_ready_state(self, file):
        parser = BehaviorParser.BehaviorParser()
        log = BehaviorParser.LogReader(file, parser)

        for frame in log:
            if 'BehaviorStateComplete' in frame.messages:
                m, o = frame["BehaviorStateComplete"]
            else:
                m, o = frame["BehaviorStateSparse"]

            if m['game.state'] == 1:
                return frame.number, frame['FrameInfo'].time

        return None
    def has_label_file(self):
        return len(self.labels) > 0

    def create_label_file(self):
        print(self.directory, self.data_directory, self.file)

    def __repr__(self):
        return "Nao{} #{}".format(self.nao, self.player_number)
