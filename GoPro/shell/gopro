#! /bin/sh

### BEGIN INIT INFO
# Provides:		gopro
# Required-Start:	$remote_fs $syslog $network
# Required-Stop:	$remote_fs $syslog $network
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	GoPi startup-script
### END INIT INFO

set -e

APP_DIR=$(realpath "$(dirname "$(readlink -f -- "$0")")/..")
APP="$APP_DIR/main.py"
VENV="$APP_DIR/.venv/bin/python"
PIDFILE="/tmp/gopi.pid"

if [ ! -f "$APP" ]; then
  echo "Missing GoPi script!"
  exit 1
fi

if [ ! -x "$VENV" ]; then
  echo "Missing python virtual environment ($VENV)!"
  exit 1
fi

cd $APP_DIR

stop() {
	echo "Stop GoPi"
	if [ -f "$PIDFILE" ]; then
		PUID=$(ps --no-headers -o uid `cat $PIDFILE` | awk '{print $1}')
		if [ "$PUID" -eq "0" -a "$(id -u)" -ne "0" ]; then
			echo "This script was started by root and must be stopped by root!"
			exit 1
		fi
		pkill -F $PIDFILE
		rm -f "$PIDFILE"
	else
		echo "GoPi not running!"
	fi
}

start() {
  echo "Start GoPi"

	if [ -f "$PIDFILE" ]; then
	  PID=$(cat "$PIDFILE")
	  # Check if the process is still running
	  if ps -p $PID > /dev/null 2>&1; then
	      echo "GoPi is already running."
	      exit 1
	  else
	      echo "Removing stale PID file."
	      rm -f "$PIDFILE"
	  fi
	fi

  $VENV $APP "gopi" &
  PID=$!

	# Write the process ID to the PID file
	echo $PID > "$PIDFILE"

	# run in foreground (NOT background) until the application exits
  if [ ! $1 ]; then
		trap 'stop' INT TERM
		wait $PID
  fi
}

status() {
	if [ -f "$PIDFILE" ] && $(ps -p `cat $PIDFILE` > /dev/null)
	then
		echo "GoPi is running!"
	else
		echo "GoPi NOT running!"
	fi
}

case "$1" in
  ""|'')
		# start in foreground
    start
    ;;
  start)
		# start in background
    start true
    ;;
  stop)
    stop
    ;;
  restart)
    echo "Restart GoPi"
    stop
    start true
    ;;
  status)
    status
    ;;
  *)
    echo "(start|stop|restart|status)"
    ;;
esac

exit 0
